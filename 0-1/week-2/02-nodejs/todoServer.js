/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs/promises')
  const app = express();
  
  app.use(bodyParser.json());
  
app.get('/todos', async(req, res)=>{
  try {
    let data = await fs.readFile('todos.json')
    data = JSON.parse(data)

    return res.status(200).send(data)
  } catch (error) {
    return res.status(500).json({error})
  }
})

app.get('/todos/:id', async(req, res)=>{
  try {
    const {id} = req.params;
    // console.log(id)
    let data = await fs.readFile('todos.json')
  data = JSON.parse(data)
  
  const todo = data.find(todo => todo.id ==  id)
  if(!todo) 
    return res.status(404).send('Not found')

  return res.status(200).json(todo)
  } catch (error) {
    return res.status(500).json({error})
  }
})

app.post('/todos', async(req,res)=>{
  try {
  const todo = req.body;
   let todos = await fs.readFile('todos.json')
  todos = JSON.parse(todos)
  const id = todos.length + 1;
  // console.log(id)

  todos.push({...todo, id})
  await fs.writeFile('todos.json', JSON.stringify(todos))

  return res.status(201).json({id})
  } catch (error) {
   return res.status(500).json(error)
  }
  
})

app.put('/todos/:id', async(req, res)=>{
  try {
    const {id} = req.params;
  const updatedTodo = req.body;

  let todos = await fs.readFile('todos.json')
  todos = JSON.parse(todos)

  todos = todos.map(todo => {
   return todo.id == id ? {...todo, ...updatedTodo} : todo
  })

  fs.writeFile('todos.json', JSON.stringify(todos))

  return res.status(200).send('Updated')
  } catch (error) {
    return res.status(500).json({error})
  }
})


app.delete('/todos/:id', async(req, res)=>{
  try {
    const {id} = req.params;

  let todos = await fs.readFile('todos.json')
  todos = JSON.parse(todos);

  const todoFound = todos.find(todo => todo.id == id)
  if(!todoFound)
    return res.status(400).send('Not Found.')

  todos = todos.filter(todo => todo.id != id)

  await fs.writeFile('todos.json', JSON.stringify(todos))

  return res.status(200).send('deleted')
  } catch (error) {
    return res.status(500).json({error})
  }
})

app.all('*', (req, res)=>{
  return res.status(404).send("Route not found")
})

  // app.listen(3000, console.log('Server started.'))
  module.exports = app;